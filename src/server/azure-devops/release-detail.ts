// Generated by https://quicktype.io

import { ReleaseLinks, IdentityRef } from "./release";
import { ReleaseDefinition } from "./release-definition";

export interface ReleaseDetail {
    id:                         number;
    name:                       string;
    status:                     string;
    createdOn:                  string;
    modifiedOn:                 string;
    modifiedBy:                 IdentityRef;
    createdBy:                  IdentityRef;
    createdFor:                 IdentityRef;
    environments:               Environment[];
    variables:                  Properties;
    variableGroups:             any[];
    artifacts:                  Artifact[];
    releaseDefinition:          ReleaseDefinition;
    releaseDefinitionRevision:  number;
    description:                string;
    reason:                     string;
    releaseNameFormat:          string;
    keepForever:                boolean;
    definitionSnapshotRevision: number;
    logsContainerUrl:           string;
    url:                        string;
    _links:                     ReleaseLinks;
    tags:                       any[];
    triggeringArtifactAlias:    null;
    projectReference:           Reference;
    properties:                 Properties;
}

export interface Artifact {
    sourceId:            string;
    type:                string;
    alias:               string;
    definitionReference: { [key: string]: Reference };
    isPrimary:           boolean;
    isRetained:          boolean;
}

export interface Reference {
    id:   string;
    name: null | string;
}

export interface Environment {
    id:                          number;
    releaseId:                   number;
    name:                        string;
    status:                      string;
    variables:                   Properties;
    variableGroups:              any[];
    preDeployApprovals:          any[];
    postDeployApprovals:         any[];
    preApprovalsSnapshot:        ApprovalsSnapshot;
    postApprovalsSnapshot:       ApprovalsSnapshot;
    deploySteps:                 any[];
    rank:                        number;
    definitionEnvironmentId:     number;
    environmentOptions:          EnvironmentOptions;
    demands:                     any[];
    conditions:                  any[];
    workflowTasks:               any[];
    deployPhasesSnapshot:        DeployPhasesSnapshot[];
    owner:                       IdentityRef;
    schedules:                   any[];
    release:                     Release;
    releaseDefinition:           ReleaseDefinition;
    releaseCreatedBy:            IdentityRef;
    triggerReason:               string;
    processParameters:           ProcessParameters;
    preDeploymentGatesSnapshot:  DeploymentGatesSnapshot;
    postDeploymentGatesSnapshot: DeploymentGatesSnapshot;
}

export interface DeployPhasesSnapshot {
    deploymentInput: DeploymentInput;
    rank:            number;
    phaseType:       string;
    name:            string;
    refName:         null;
    workflowTasks:   WorkflowTask[];
}

export interface DeploymentInput {
    parallelExecution:         ParallelExecution;
    agentSpecification:        null;
    skipArtifactsDownload:     boolean;
    artifactsDownloadInput:    ArtifactsDownloadInput;
    queueId:                   number;
    demands:                   any[];
    enableAccessToken:         boolean;
    timeoutInMinutes:          number;
    jobCancelTimeoutInMinutes: number;
    condition:                 Condition;
    overrideInputs:            Properties;
}

export interface ArtifactsDownloadInput {
    downloadInputs: any[];
}

export enum Condition {
    Succeeded = "succeeded()",
}

export interface Properties {
}

export interface ParallelExecution {
    parallelExecutionType: string;
}

export interface WorkflowTask {
    environment:      WorkflowTaskEnvironment;
    taskId:           string;
    version:          Version;
    name:             string;
    refName:          string;
    enabled:          boolean;
    alwaysRun:        boolean;
    continueOnError:  boolean;
    timeoutInMinutes: number;
    definitionType:   DefinitionType;
    overrideInputs:   Properties;
    condition:        Condition;
    inputs:           { [key: string]: string };
}

export enum DefinitionType {
    Task = "task",
}

export interface WorkflowTaskEnvironment {
    "system.debug"?: string;
}

export enum Version {
    The1 = "1.*",
    The2 = "2.*",
    The4 = "4.*",
}

export interface EnvironmentOptions {
    emailNotificationType:        string;
    emailRecipients:              string;
    skipArtifactsDownload:        boolean;
    timeoutInMinutes:             number;
    enableAccessToken:            boolean;
    publishDeploymentStatus:      boolean;
    badgeEnabled:                 boolean;
    autoLinkWorkItems:            boolean;
    pullRequestDeploymentEnabled: boolean;
}

export interface ApprovalsSnapshot {
    approvals:       Approval[];
    approvalOptions: ApprovalOptions;
}

export interface ApprovalOptions {
    requiredApproverCount:                                   null;
    releaseCreatorCanBeApprover:                             boolean;
    autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped: boolean;
    enforceIdentityRevalidation:                             boolean;
    timeoutInMinutes:                                        number;
    executionOrder:                                          string;
}

export interface Approval {
    rank:             number;
    isAutomated:      boolean;
    isNotificationOn: boolean;
    id:               number;
}

export interface DeploymentGatesSnapshot {
    id:           number;
    gatesOptions: null;
    gates:        any[];
}

export interface ProcessParameters {
    dataSourceBindings?: DataSourceBinding[];
}

export interface DataSourceBinding {
    dataSourceName: string;
    parameters:     Parameters;
    endpointId:     string;
    target:         string;
}

export interface Parameters {
    WebAppKind: string;
}

export interface Release {
    id:     number;
    name:   string;
    url:    string;
    _links: ReleaseLinks;
}
